[project]
name = "coeffinance"
version = "0.1.0"
description = "Expert system for ratio financial analysis of business."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "aiohttp>=3.12.14",
    "alembic>=1.16.4",
    "asgi-lifespan>=2.1.0",
    "asyncpg>=0.30.0",
    "dishka>=1.6.0",
    "email-validator>=2.2.0",
    "fastapi>=0.115.11",
    "fastcrud>=0.15.12",
    "httpx>=0.28.1",
    "psycopg2-binary>=2.9.10",
    "pydantic-extra-types>=2.10.2",
    "pydantic-settings>=2.8.1",
    "pytest-asyncio>=0.25.3",
    "semver>=3.0.4",
    "sqlmodel>=0.0.24",
    "uvicorn>=0.34.0",
    "yoyo-migrations>=9.0.0",
]

[dependency-groups]
dev = [
    "asyncpg-stubs>=0.30.1",
    "mypy>=1.15.0",
    "ruff>=0.9.10",
]

[tool.alembic]
# path to migration scripts
script_location = "%(here)s/src/core/migrator"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]

# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"


# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#

# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.mypy]
plugins = ['pydantic.mypy']
exclude = ["src/core/migrator"]

[tool.ruff]
target-version = "py313"
line-length = 120
extend-exclude = ["src/core/migrator"]

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "ARG",
    "D",
    "EM",

    "ANN401",
    "S101",
    "TRY003",
]
